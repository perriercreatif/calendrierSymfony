{# default/scheduler.html.twig #}
{% extends "base.html.twig" %}
{% block title %}Modification calendrier evenement récurrent{% endblock %}
{% block stylesheets %}
    <!-- Include the flat style of the scheduler -->
    <link rel='stylesheet' type='text/css' href='{{ asset("libraries/dhtmlxScheduler/codebase/dhtmlxscheduler.css") }}' charset="utf-8"/>

    <link rel="stylesheet" type="text/css" href="{{ asset('libraries/dhtmlxScheduler/codebase/dhtmlxscheduler_material.css') }}" charset="utf-8"/>
    <link rel="stylesheet" type="text/css" href="{{ asset('css/stylePlanningAdmin.css') }}" charset="utf-8"/>

{% endblock %}

{% block body -%}

    <div class="container-fluid">
        <div class="pageCalendrier col-11">

            <div id="calendrier">
                <div id="scheduler_here" class="dhx_cal_container">
                    <div class="dhx_cal_navline">
                        <div class="dhx_cal_prev_button">&nbsp;</div>
                        <div class="dhx_cal_next_button">&nbsp;</div>
                        <div class="dhx_cal_today_button"></div>
                        <div class="dhx_cal_date"></div>
                        <div class="dhx_cal_tab dhx_cal_tab_first day_tab" name="day_tab" ></div>
                        <div class="dhx_cal_tab week_tab" name="week_tab" ></div>
                        <div class="dhx_cal_tab dhx_cal_tab_last month_tab" name="month_tab" ></div>
                    </div>
                    <div class="dhx_cal_header"></div>
                    <div class="dhx_cal_data"></div>
                </div>
            </div>
        </div>
    </div>

{% endblock %}

{% block javascripts %}
    <!-- Include the scheduler library -->
    <script src='{{ asset("libraries/dhtmlxScheduler/codebase/dhtmlxscheduler.js") }}' type='text/javascript' charset="utf-8"></script>
    <script src="{{ asset('libraries/dhtmlxScheduler/codebase/ext/dhtmlxscheduler_limit.js') }}" type="text/javascript"></script>
    <script src="{{ asset('libraries/dhtmlxScheduler/codebase/ext/dhtmlxscheduler_recurring.js') }}" type="text/javascript"></script>
    <script src="{{ asset('libraries/dhtmlxScheduler/codebase/sources/locale/locale_fr.js') }}"></script>
    <script src="{{ asset('libraries/dhtmlxScheduler/codebase/locale/recurring/locale_recurring_fr.js') }}"></script>

    <!-- Include jQuery to handle AJAX Requests -->
    <script src="{{ 'https://cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.min.js' }}"></script>

    <!-- remettre pour inserer des Événements récurrents-->
    {##}
    <!-- Include Momentjs to play with the dates -->
    <script src="{{ asset("libraries/momentjs/moment.js") }}"></script>

    <script>
        // Expose the appointments globally by printing the JSON string with twig and the raw filter
        // so they can be accesible by the schedulerScripts.js the controller
        window.GLOBAL_APPOINTMENTS = {{ planningRecurrent|raw }};

        // As the scheduler scripts will be in other files, the routes generated by twig
        // should be exposed in the window too
        window.GLOBAL_SCHEDULER_ROUTES = {
            create: '{{ path("planningRecurrent_create") }}',
            update: '{{ path("planningRecurrent_update") }}',
            delete: '{{ path("planningRecurrent_delete") }}'
        };

    </script>

    <!-- Include the schedulerScripts that you will need to write in the next step -->
    <script>
        // 1. Configure Scheduler Basic Settings
        scheduler.config.xml_date="%Y-%m-%d %H:%i";
        scheduler.config.default_date="%j %M";
        scheduler.config.prevent_cache = true;
        scheduler.config.first_hour = 9;
        scheduler.config.last_hour = 17;
        scheduler.config.select = true;
        scheduler.config.details_on_create=true;
        scheduler.config.details_on_dblclick=true;
        scheduler.config.resize_month_events = true;
        scheduler.config.fix_tab_position = true;
        scheduler.config.occurrence_timestamp_in_utc = true;
        scheduler.xy.scale_height=50;
        scheduler.xy.nav_height=60;
        scheduler.config.include_end_by = true;
        scheduler.config.repeat_precise = true;

        //define how text inside event bar looks
        scheduler.templates.event_text=function(start,end,event){
            return "<b>"+event.titre+"</b>" + "<br/>"+"<b>"+event.description+"</b>";
        };

        scheduler.blockTime({
            days: [1,2,3,4],
            zones: [0,9*60,16*60,24*60]
        });
        scheduler.blockTime({
            days: 5,
            zones: [0,9*60,12*60,24*60]
        });
        scheduler.blockTime([0,6], "fullday");


        scheduler.addMarkedTimespan({
            days:  1,
            zones: "fullday",
            css:   "figeac_section"
        });

        scheduler.addMarkedTimespan({
            days:  2,
            zones: "fullday",
            css:   "Decazeville_section"
        });

        scheduler.addMarkedTimespan({
            days:  5,
            zones: "fullday",
            css:   "Capdenac_section"
        });

        //sup Dimanche et Samedi
        scheduler.ignore_week = function(date){
            if (date.getDay() == 0 || date.getDay() == 6) //hides Saturdays and Sundays
                return true;
        };

        scheduler.ignore_month = function(date){
            if (date.getDay() == 0 || date.getDay() == 6) //hides Saturdays and Sundays
                return true;
        };


        //define how text inside event bar looks
        scheduler.templates.event_text=function(start,end,event){
            return "<b>"+event.titre+"</b>" + "<br/>"+"<b>"+event.description+"</b>";
        };



        // 2. Configure Lightbox (form) sections
        scheduler.config.lightbox.sections = [
            // If you have another field on your Appointment entity (e.g example_field column), you would add it like
            // {name:"Example Field", height:30, map_to:"example_field", type:"textarea"},
            {name:"titre", height:30, map_to:"titre", type:"textarea" , focus:true},
            {name:"description", height:50, map_to:"description", type:"textarea" , focus:true},
            {name:"recurring", height:200, type:"recurring", map_to:"rec_type",
                button:"recurring"},
            {name:"time", height:72, type:"time", map_to:"auto"}
        ];

        // 3. Start calendar with custom settings
        var initSettings = {
            // Element where the scheduler will be started
            elementId: "scheduler_here",
            // Date object where the scheduler should be started
            startDate: new Date(),
            // Start mode
            mode: "month"
        };

        scheduler.init(initSettings.elementId, initSettings.startDate , initSettings.mode);

        // 4. Parse the initial (From index controller) evenement
        scheduler.parse(window.GLOBAL_APPOINTMENTS, "json");

        // 5. Function that formats the events to the expected format in the server side

        /**
         * Returns an Object with the desired structure of the server.
         *
         * @param {*} id
         * @param {*} useJavascriptDate
         */
        function getFormatedEvent(id, useJavascriptDate){
            var event;

            // If id is already an event object, use it and don't search for it
            if(typeof(id) == "object"){
                event = id;
            }else{
                event = scheduler.getEvent(parseInt(id));
            }

            if(!event){
                console.error("L'ID de l'événement n'existe pas : " + id);
                return false;
            }


            var start , end;

            if(useJavascriptDate){
                start = event.start_date;
                end = event.end_date;

            }else{
                start = moment(event.start_date).format('DD-MM-YYYY HH:mm:ss');
                end = moment(event.end_date).format('DD-MM-YYYY HH:mm:ss');
            }

            return {
                id: event.id,
                start_date : start,
                end_date : end,
                titre : event.titre,
                description : event.description,
                event_length : event.event_length,
                rec_type : event.rec_type
                //event_pid : event.event_pid
            };
        }




        // 6. Attach Event Handlers !

        /**
         * Handle the CREATE scheduler event
         */
        scheduler.attachEvent("onEventAdded", function(id,ev){
            var schedulerState = scheduler.getState();

            $.ajax({
                url:  window.GLOBAL_SCHEDULER_ROUTES.create,
                data: getFormatedEvent(ev),
                dataType: "json",
                type: "POST",
                success: function(response){

                    // Very important:
                    // Update the ID of the scheduler calendrier with the ID of the database
                    // so we can edit the same calendrier now !

                    scheduler.changeEventId(ev.id , response.id);

                    alert("Le rendez-vous a été créé avec succès.");
                },
                error:function(error){
                    alert("Erreur : Le rendez-vous n\'a pas pu être créé");
                    console.log(error);
                }
            });
        });

        /**
         * Handle the UPDATE event of the scheduler on all possible cases (drag and drop, resize etc..)
         *
         */
        scheduler.attachEvent("onEventChanged", function(id,ev){
            $.ajax({
                url:  window.GLOBAL_SCHEDULER_ROUTES.update,
                data: getFormatedEvent(ev),
                dataType: "json",
                type: "POST",
                success: function(response){
                    if(response.status == "success"){
                        alert("Rendez-vous mis à jour avec succès !");
                    }
                },
                error: function(err){
                    alert("Erreur : Impossible de sauvegarder les modifications");
                    console.error(err);
                }
            });

            return true;
        });

        /**
         * Handle the DELETE calendrier event
         */
        scheduler.attachEvent("onConfirmedBeforeEventDelete",function(id,ev){
            $.ajax({
                url: window.GLOBAL_SCHEDULER_ROUTES.delete,
                data:{
                    id: id
                },
                dataType: "json",
                type: "DELETE",
                success: function(response){
                    if(response.status == "success"){
                        if(!ev.willDeleted){
                            alert("Rendez-vous supprimé avec succès");
                        }
                    }else if(response.status == "error"){
                        alert("Erreur : Impossible de supprimer le rendez-vous");
                    }
                },
                error:function(error){
                    alert("Erreur : Impossible de supprimer le rendez-vous. ");
                    console.log(error);
                }
            });

            return true;
        });


        /**
         * Edit event with the right click too
         *
         * @param {type} id
         * @param {type} ev
         * @returns {Boolean}
         */
        scheduler.attachEvent("onContextMenu", function (id, e){
            scheduler.showLightbox(id);
            e.preventDefault();
        });
    </script>

{% endblock %}
