{# default/scheduler.html.twig #}
{% extends "base.html.twig" %}
{% block title %}Affichage calendrier evenement occasionnel{% endblock %}
{% block stylesheets %}


    <!-- Include the flat style of the scheduler -->

    <!-- Include the flat style of the scheduler -->
    <link rel='stylesheet' type='text/css' href='{{ asset("libraries/dhtmlxScheduler/codebase/dhtmlxscheduler.css") }}' charset="utf-8"/>

    <link rel="stylesheet" type="text/css" href="{{ asset('libraries/dhtmlxScheduler/codebase/dhtmlxscheduler_material.css') }}" charset="utf-8"/>
    <link rel="stylesheet" type="text/css" href="{{ asset('css/stylePlanning.css') }}" charset="utf-8"/>

{% endblock %}

{% block body -%}
    <div class="container-fluid">
        <div class="pageCalendrier col-11">

            <div id="calendrier">
                <div id="scheduler_element" class="dhx_cal_container">
                    <div class="dhx_cal_navline">
                        <div class="dhx_cal_prev_button">&nbsp;</div>
                        <div class="dhx_cal_next_button">&nbsp;</div>
                        <div class="dhx_cal_today_button"></div>
                        <div class="dhx_cal_date"></div>
                    </div>
                    <div class="dhx_cal_header"></div>
                    <div class="dhx_cal_data"></div>
                </div>
            </div>
        </div>
    </div>
{% endblock %}

{% block javascripts %}
    <!-- Include the scheduler library -->
    <script src='{{ asset("libraries/dhtmlxScheduler/codebase/schedulerScriptsEventRec.js") }}' type='text/javascript' charset="utf-8"></script>

    <script src="{{ asset('libraries/dhtmlxScheduler/codebase/ext/dhtmlxscheduler_limit.js') }}" type="text/javascript"></script>

    <script src="{{ asset('libraries/dhtmlxScheduler/codebase/sources/locale/locale_fr.js') }}"></script>
    <!-- Include jQuery to handle AJAX Requests -->
    <script src="{{ 'https://cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.min.js' }}"></script>

    <!-- Include Momentjs to play with the dates -->
    <script src="{{ asset("libraries/momentjs/moment.js") }}"></script>

    <script>
        // Expose the appointments globally by printing the JSON string with twig and the raw filter
        // so they can be accesible by the schedulerScripts.js the controller
        window.GLOBAL_APPOINTMENTS = {{ planningOccasionnel|raw }};

        // As the scheduler scripts will be in other files, the routes generated by twig
        // should be exposed in the window too


    </script>

    <!-- Include the schedulerScripts that you will need to write in the next step -->
    <script>
        // 1. Configure Scheduler Basic Settings
        scheduler.config.xml_date="%Y-%m-%d %H:%i";
        scheduler.config.first_hour = 9;
        scheduler.config.last_hour = 17;
        scheduler.config.limit_time_select = false;
        scheduler.config.details_on_create = false;
        scheduler.config.dblclick_create = false;
        scheduler.config.click_create = false;
        scheduler.config.select = false;
        scheduler.config.details_on_dblclick = false;
        scheduler.config.fix_tab_position = false;


        //block all modifications
        scheduler.attachEvent("onBeforeDrag",function(){return false;});
        scheduler.attachEvent("onClick",function(){return false;});

        //taille header du calendrier
        scheduler.xy.scale_height=50;
        scheduler.xy.nav_height=50;
        scheduler.config.include_end_by = true;
        scheduler.config.repeat_precise = true;

        //blockage de certaine heures
        scheduler.blockTime({
            days: [1,2,3,4],
            zones: [0,9*60,16*60,24*60]
        });
        scheduler.blockTime({
            days: 5,
            zones: [0,9*60,12*60,24*60]
        });
        scheduler.blockTime([0,6], "fullday");

        //selection de jour a mettre en evidence
        scheduler.addMarkedTimespan({
            days:  1,
            zones: "fullday",
            css:   "figeac_section"
        });
        scheduler.addMarkedTimespan({
            days:  2,
            zones: "fullday",
            css:   "Decazeville_section"
        });
        scheduler.addMarkedTimespan({
            days:  5,
            zones: "fullday",
            css:   "Capdenac_section"
        });

        //supression Dimanche et Samedi
        scheduler.ignore_week = function(date){
            if (date.getDay() == 0 || date.getDay() == 6) //hides Saturdays and Sundays
                return true;
        };

        //define how text inside event bar looks
        scheduler.templates.event_text=function(start,end,event){
            return "<b>"+event.titre+"</b>" + "<br/>"+"<b>"+event.description+"</b>";
        };

        // 2. Configure Lightbox (form) sections
        scheduler.config.lightbox.sections = [
            // If you have another field on your Appointment entity (e.g example_field column), you would add it like
            // {name:"Example Field", height:30, map_to:"example_field", type:"textarea"},
            {name:"titre", height:30, map_to:"titre", type:"textarea" , focus:true},
            {name:"description", height:50, map_to:"description", type:"textarea" , focus:true},
            {name:"time", height:72, type:"time", map_to:"auto"}
        ];

        // 3. Start calendar with custom settings
        var initSettings = {
            // Element where the scheduler will be started
            elementId: "scheduler_element",
            // Date object where the scheduler should be started
            startDate: new Date(),
            // Start mode
            mode: "week"
        };
        scheduler.init(initSettings.elementId, initSettings.startDate , initSettings.mode);

        // 4. Parse the initial (From index controller) evenement
        scheduler.parse(window.GLOBAL_APPOINTMENTS, "json");

        // 5. Function that formats the events to the expected format in the server side
        /**
         * Returns an Object with the desired structure of the server.
         *
         * @param {*} id
         * @param {*} useJavascriptDate
         */
        function getFormatedEvent(id, useJavascriptDate){
            var event;

            // If id is already an event object, use it and don't search for it
            if(typeof(id) == "object"){
                event = id;
            }else{
                event = scheduler.getEvent(parseInt(id));
            }

            if(!event){
                console.error("L'ID de l'événement n'existe pas : " + id);
                return false;
            }


            var start , end;

            if(useJavascriptDate){
                start = event.start_date;
                end = event.end_date;

            }else{
                start = moment(event.start_date).format('DD-MM-YYYY HH:mm:ss');
                end = moment(event.end_date).format('DD-MM-YYYY HH:mm:ss');
            }

            return {
                id: event.id,
                start_date : start,
                end_date : end,
                titre : event.titre,
                description : event.description
            };
        }

        /**
         * Edit event with the right click too
         *
         * @param {type} id
         * @param {type} ev
         * @returns {Boolean}
         */
        scheduler.attachEvent("onContextMenu", function (id, e){
            scheduler.showLightbox(id);
            e.preventDefault();
        });
    </script>
{% endblock %}